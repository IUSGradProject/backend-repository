// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APIs.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("BrandId")
                        .HasName("PK__Brand__8DA7674D6A5C0E7F");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("APIs.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("Paid")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartId")
                        .HasName("PK_Cart_CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("APIs.CartProduct", b =>
                {
                    b.Property<Guid>("CartProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartProductId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProduct", (string)null);
                });

            modelBuilder.Entity("APIs.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__19093A0BEB0B9466");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("APIs.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("MaterialId")
                        .HasName("PK__Material__C50610F77DCD5473");

                    b.ToTable("Material", (string)null);
                });

            modelBuilder.Entity("APIs.MaterialProduct", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductId");

                    b.ToTable("MaterialProduct", (string)null);
                });

            modelBuilder.Entity("APIs.Power", b =>
                {
                    b.Property<int>("PowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PowerId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PowerId")
                        .HasName("PK__Power__8C5F25D03FB9FD7C");

                    b.ToTable("Power", (string)null);
                });

            modelBuilder.Entity("APIs.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Available")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLast")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SoldItems")
                        .HasColumnType("int");

                    b.Property<int>("StyleId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ProductId")
                        .HasName("PK__Product__B40CC6CDBDC52268");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PowerId");

                    b.HasIndex("StyleId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("APIs.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Role1")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("Role");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE1A554D42D9");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("APIs.Style", b =>
                {
                    b.Property<int>("StyleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StyleId"));

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("StyleId")
                        .HasName("PK__Style__8AD1464022376A8C");

                    b.ToTable("Style", (string)null);
                });

            modelBuilder.Entity("APIs.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastRequest")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK__User__CB9A1CFF48106B7C");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ_User_Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("APIs.Cart", b =>
                {
                    b.HasOne("APIs.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Cart__UserId__3B75D760");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APIs.CartProduct", b =>
                {
                    b.HasOne("APIs.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK_CartProduct_CartId");

                    b.HasOne("APIs.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_CartProduct_ProductId");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APIs.MaterialProduct", b =>
                {
                    b.HasOne("APIs.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .IsRequired()
                        .HasConstraintName("FK__MaterialP__Mater__32E0915F");

                    b.HasOne("APIs.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__MaterialP__Produ__33D4B598");

                    b.Navigation("Material");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APIs.Product", b =>
                {
                    b.HasOne("APIs.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK__Product__BrandId__2F10007B");

                    b.HasOne("APIs.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Product__Categor__2E1BDC42");

                    b.HasOne("APIs.Power", "Power")
                        .WithMany("Products")
                        .HasForeignKey("PowerId")
                        .IsRequired()
                        .HasConstraintName("FK__Product__PowerId__30F848ED");

                    b.HasOne("APIs.Style", "Style")
                        .WithMany("Products")
                        .HasForeignKey("StyleId")
                        .IsRequired()
                        .HasConstraintName("FK__Product__StyleId__300424B4");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Power");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("APIs.User", b =>
                {
                    b.HasOne("APIs.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__User__RoleId__38996AB5");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("APIs.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("APIs.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("APIs.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("APIs.Power", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("APIs.Product", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("APIs.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("APIs.Style", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("APIs.User", b =>
                {
                    b.Navigation("Carts");
                });
#pragma warning restore 612, 618
        }
    }
}
